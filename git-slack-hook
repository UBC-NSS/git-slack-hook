#!/bin/bash
#
# Slack (slack.com) notification post-receive hook.
#
# Based on: https://github.com/joemiller/git-hooks Campfire notification post-receive hook. Author: Joe Miller
# (http://joemiller.me)
#
# Based on post-receive.irc by Mikael Fridh <frimik@gmail.com> https://gist.github.com/1821358
#
# Settings needed:
#  git config hooks.slack.webhook-url "https://hooks.slack.com/services/..."
#  git config hooks.slack.channel "general"
#
# - The Slack webhook URL can be found in:
#   https://my.slack.com/services/new/incoming-webhook
#
function help() {
  echo "Required config settings:
 git config hooks.slack.webhook-url 'https://hooks.slack.com/services/...'
 git config hooks.slack.channel 'general'
 git config hooks.slack.show-only-last-commit true #optional
 git config hooks.slack.show-full-commit true #optional
 git config hooks.slack.username 'git' #optional
 git config hooks.slack.icon-url 'http://imgur/icon.png' #optional
 git config hooks.slack.icon-emoji ':twisted_rightwards_arrows:' #optional
 git config hooks.slack.repo-nice-name 'MyRepo' #optional
 git config hooks.slack.repos-root '/path/to/repos' #optional
 git config hooks.slack.changeset-url-pattern 'http://yourserver/%repo_path%/changeset/%rev_hash%' #optional
 git config hooks.slack.compare-url-pattern 'http://yourserver/%repo_path%/changeset/%old_rev_hash%..%new_rev_hash%' #optional
 git config hooks.slack.branch-regexp 'regexp'  #optional
 git config hooks.slack.max-commits-per-changeset '20' # slack displays 20 or so (rest are collapsed)
"
}

# Per-Repo config override these defaults
DEFAULTS=(
  #KEY                              #VALUE
  hooks.slack.show-only-last-commit "false"
  hooks.slack.show-full-commit      "false"

  hooks.slack.max-commits-per-changeset "20"
  hooks.slack.log-prefix            "*** "
)

function git_config() {
  # Usage: git_config KEY
  #   prints git config value if found.
  #
  #   exits with success is found, failure otherwise.
  #   the return value allows differentiating undefined keys from empty values.

  # try repo config first, then search defaults
  local i=0
  git config "$1" 2>/dev/null || (
    set +x
    # try defaults (program defaults and command line)
    for ((i=0; i<${#DEFAULTS[@]}; i+=2)); do
      if [[ "${DEFAULTS[i]}" == "$1" ]]; then echo -n "${DEFAULTS[i+1]}"; return 0; fi
    done
    return 1
  )
}

function git_config_bool() {
  local val=$(git_config "$1")
  case "${val^^}" in
    ''|0|FALSE|NO|N)
      echo -n "false"
      ;;
    *)
      echo -n "true"
      ;;
  esac
}

function update_defaults() {
  # update_defaults KEY VAL
  local i=0
  for ((i=0; i<${#DEFAULTS[@]}; i+=2)); do
    if [[ "${DEFAULTS[i]}" == "$1" ]]; then
      DEFAULTS[i+1]="$2"
      return 0
    fi
  done
  DEFAULTS+=("$1" "$2")
  return 0
}


function replace_variables () {
  local s="$1"
  shift
  local subst=("$@")
  local i=0

  for ((i=0; i<"${#subst[@]}"; i+=2)); do
    s="${s//${subst[i]}/${subst[i+1]}}"
  done

  #common ones
  s="${s//%old_rev_hash%/${oldrev}}"
  s="${s//%new_rev_hash%/${newrev}}"

  echo "$s"
}

function json_string() {
  # takes care of special characters and unicode escapes. assumes
  # input is utf-8 (in practice, every commit message may have a
  # different encoding). invalid utf-8 sequences are replaced
  # ("\ufffd" or "\u00XX" depending on input).
  python -c "import sys, json; print json.dumps(sys.argv[1].decode('utf-8', 'replace'))" "$1"
}

function json_join() {
  local IFS=","
  echo -n "$*";
}

function parse_record() {
  # parse_record STREAMVAR SEPARATOR [FIELDVAR]+
  #
  # Works similarly to the `read` builtin. Instead of using IFS, it
  # splits fields based on the separator given. It reads from and
  # modifies in place variable named STREAMVAR.  Subsequent parameters
  # are variable _names_ used to store tokens, in order.
  #
  # variable STREAMVAR will be advanced by one record: [<FIELD><SEP>]+[\n]*
  #

  local -n stream=$1
  local -n field
  local sep="$2"
  local lf=$'\n' #newline

  shift 2

  # field will point to a different field variable in turn
  for field in "$@"; do
    field="${stream%%${sep}*}"
    # advance stream
    stream="${stream:${#field}}"
    stream="${stream:${#sep}}"
  done
  # eat trailing newlines between records
  while [[ "${stream:0:1}" == $lf ]]; do
    stream=${stream:1}
  done
}

function user_log() {
    # Log target visible to user doing the push.
    #
    # Usage 1: user_log "my message" "here"
    # Usage 2: echo -e "line 1\nline2" | user_log

    local prefix="$(git_config hooks.slack.log-prefix)"
    local line

    if [[ "$#" -gt 0 ]]; then
      echo >&2 "${prefix}$*"
      return
    fi

    while read line; do
      echo >&2 "${prefix}${line}"
    done
}

function get_repopath() {
  # prints a web path relative to the root directory
  # this is the empty string if no root dir was defined.
  local sub="$PWD"

  if [[ -n "$reporoot" ]]; then
    if [[ "$sub" == "${reporoot}"* ]]; then
      if [[ "$(basename "$sub")" ==  ".git" ]]; then
	sub=$(dirname "$PWD")
      fi
      echo -n "${sub:${#reporoot}}" # strip reporoot from path
      return 0
    fi
    user_log "$PWD is not in $reporoot. Not creating hyperlinks."
  fi
  return 1
}

function make_changeset_link() {
    # make_changeset_link LABEL REVHASH
    # creates a slack link for the latest changeset <URL|LABEL>
    local label=$1 revhash=$2
    local changeseturlpattern=$(git_config hooks.slack.changeset-url-pattern)
    local repopath=$(get_repopath)
    local url=
    if [[ -n "$repopath" && -n "$changeseturlpattern" ]]; then
	url=$(
	    replace_variables "$changeseturlpattern" \
		%repo_path%     "$repopath" \
		%rev_hash%      "$revhash"
	)
    fi
    echo -n "<$url|$label>"
}

function make_compare_link() {
    # make_compare_link LABEL
    # creates a slack link for a single changeset <URL|LABEL>
    local label=$1
    local compareurlpattern=$(git_config hooks.slack.compare-url-pattern)
    local repopath=$(get_repopath)
    local url=

    if [[ -n "$repopath" && -n "$compareurlpattern" ]]; then
	url=$(
	    replace_variables "$compareurlpattern" \
		%repo_path%     "$repopath"
	)
    fi
    echo "<$url|$label>"
}

function notify() {
  oldrev=$(git rev-parse $1)
  newrev=$(git rev-parse $2)
  refname="$3"

  webhook_url=$(git_config hooks.slack.webhook-url) || {
      # webhook_url undefined.
      (
	  echo "Error: config settings not found"
	  help
      ) | user_log
      exit 1
  }

  [[ -n "$webhook_url" ]] || {
      # webhook_url defined, but empty.
      # we assume the hook is disabled.
      exit 0
  }

  # --- Interpret
  # 0000->1234 (create)
  # 1234->2345 (update)
  # 2345->0000 (delete)
  if expr "$oldrev" : '0*$' >/dev/null
  then
    change_type="create"
  else
    if expr "$newrev" : '0*$' >/dev/null
    then
      change_type="delete"
    else
      change_type="update"
    fi
  fi

  # --- Get the revision types
  newrev_type=$(git cat-file -t "$newrev" 2> /dev/null)
  oldrev_type=$(git cat-file -t "$oldrev" 2> /dev/null)
  case "$change_type" in
    create|update)
      rev="$newrev"
      rev_type="$newrev_type"
      ;;
    delete)
      rev="$oldrev"
      rev_type="$oldrev_type"
      ;;
  esac

  # The revision type tells us what type the commit is, combined with
  # the location of the ref we can decide between
  #  - working branch
  #  - tracking branch
  #  - unannoted tag
  #  - annotated tag
  case "$refname","$rev_type" in
    refs/tags/*,commit)
      # un-annotated tag
      refname_type="tag"
      short_refname=${refname##refs/tags/}
      ;;
    refs/tags/*,tag)
      # annotated tag
      refname_type="annotated tag"
      short_refname=${refname##refs/tags/}
      # change recipients
      if [ -n "$announcerecipients" ]; then
        recipients="$announcerecipients"
      fi
      ;;
    refs/heads/*,commit)
      # branch
      refname_type="branch"
      short_refname=${refname##refs/heads/}
      ;;
    refs/remotes/*,commit)
      # tracking branch
      refname_type="tracking branch"
      short_refname=${refname##refs/remotes/}
      user_log "Push-update of tracking branch, $refname"
      user_log " - no notification generated."
      return 0
      ;;
    *)
      # Anything else (is there anything else?)
      user_log "Unknown type of update to $refname ($rev_type)"
      user_log " - no notification generated"
      return 0
      ;;
  esac

  branchregexp=$(git_config hooks.slack.branch-regexp)
  if [ -n "$branchregexp" ]; then
    if [[ ! $short_refname =~ $branchregexp ]]; then
      exit 0;
    fi
  fi

  # plural suffix, default "", changed to "s" if commits > 1
  s=""

  # Repo name, either Gitolite or normal repo.
  if [ -n "$GL_REPO" ]; then
    # it's a gitolite repo
    repodir=$(basename "$(pwd)")
    repo=$GL_REPO
  else
    repodir=$(basename "$(pwd)")
    if [ "$repodir" == ".git" ]; then
      repodir=$(dirname "$PWD")
      repodir=$(basename "$repodir")
    fi
    repo=${repodir%.git}
  fi

  repoprefix=$(git_config hooks.slack.repo-nice-name || git_config hooks.irc.prefix || git_config hooks.emailprefix || echo "$repo")
  fullcommit=$(git_config_bool hooks.slack.show-full-commit)
  onlylast=$(git_config_bool hooks.slack.show-only-last-commit)
  reporoot=$(git_config hooks.slack.repos-root)


  # Get the user information
  # If $GL_USER is set we're running under gitolite.
  if [ -n "$GL_USER" ]; then
    user=$GL_USER
  else
    user=$USER
  fi

  case ${change_type} in
    "create")
      num=0
      header="${user} created ${refname_type} *${short_refname}* in ${repoprefix}"
      single_commit_suffix="commit"
      ;;
    "delete")
      num=0
      header="%s" "${user} deleted ${refname_type} *$short_refname* from ${repoprefix}"
      single_commit_suffix="commit"
      ;;
    "update")
      num=$(git log --pretty=oneline ${1}..${2}|wc -l|tr -d ' ')
      branch=${3/refs\/heads\//}

      if [ ${num} -gt 1 ]; then
        header="${user} *pushed* $(make_compare_link "${num} new commits") to *${short_refname}* of ${repoprefix}"
        single_commit_suffix="one"
        s="s"
      else
        header="${user} *pushed* $(make_compare_link "a new commit") to *${short_refname}* of ${repoprefix}"
        single_commit_suffix="one"
      fi

      ;;
    *)
      # most weird ... this should never happen
      user_log "Unknown type of update to $refname ($rev_type)"
      user_log " - notifications will probably screw up."
      ;;
  esac

  if [[ "$onlylast" == true ]] && [[ "${change_type}" != "delete" ]]; then
    header="$header, showing last $single_commit_suffix:"
  fi


  if [[ "${change_type}" != "delete" && "${refname_type}" == "branch" ]]; then
    nl="\\\\n"

    if [[ "${change_type}" == "update" ]]; then
      start="${1}"
    else
      start="HEAD"
    fi

    end="${2}"


    # merge `git log` output with $header
    if [[ "$onlylast" == true ]]; then
      countarg="-n 1"
    else
      countarg=""
    fi

    # show the full commit message
    if [ "$fullcommit" == "true" ]; then
      commitformat="%s%n%n%b"
    else
      commitformat="%s"
    fi

    sep="boundary-${RANDOM}-${RANDOM}-${RANDOM}-${RANDOM}-${RANDOM}-${RANDOM}-${RANDOM}--"
    log_out=$(git log --pretty=format:"%cN${sep}%h${sep}${commitformat}${sep}" $countarg "${start}..${end}")
    attachment_arr=()
    max_commits=$(git_config hooks.slack.max-commits-per-changeset)
    while [[ -n "${log_out}" ]]; do

      # do not exceed limit
      if [[ -n "$max_commits" && ( "${max_commits}" -le "${#attachment_arr[@]}" ) ]]; then
	  break;
      fi

      title=""
      rev=""
      value=""
      parse_record log_out "${sep}" title rev value

      value="$(make_changeset_link "${rev}" "${rev}") $value"
      attachment_arr+=('
{
  "fallback": "",
  "color": "good",
  "fields": [{
    "title": '"$(json_string "$title")"',
    "value": '"$(json_string "$value")"',
    "short": false
  }]
}')
    done


  fi

  if [[ "${#attachment_arr[@]}" -gt 0 ]]; then
    attachments="[ $( json_join "${attachment_arr[@]}" ) ]"
    msg='
"text": '"$(json_string "$header")"',
"attachments": '"$attachments"
  else
    msg='
"text": '"$(json_string "${header}")"
  fi

  channel=$(git_config hooks.slack.channel)
  username=$(git_config hooks.slack.username)
  iconurl=$(git_config hooks.slack.icon-url)
  iconemoji=$(git_config hooks.slack.icon-emoji)

  payload="{${msg}"

  [[ -z "$channel" ]]   || payload+=',"channel":'"$(json_string "$channel")"
  [[ -z "$username" ]]  || payload+=',"username":'"$(json_string "$username")"
  [[ -z "$iconurl" ]]   || payload+=',"icon_url":'"$(json_string "$iconurl")"
  [[ -z "$iconemoji" ]] || payload+=',"icon_emoji":'"$(json_string "$iconemoji")"

  payload+="}"

  if [ -n "$DEBUG" ]; then
    echo "POST $webhook_url"
    echo "payload=$payload"
    return
  fi

  curl -s \
      --data-urlencode "payload=$payload" \
      "$webhook_url" \
      >/dev/null && {
      # slack notified branch/tag *foo* updated/created/deleted
      user_log "Sent nofification: ${refname_type} *${short_refname}* ${change_type}d"
  }
}

while [[ "$#" -gt 0 ]]; do
  case "$1" in
    -h|--help)
      help
      exit 1
      ;;
    -c|--config)
      [[ "$#" -gt 2 ]] || { echo >&2 "Missing arguments: syntax is `--config <key> <value>`"; exit 1; }
      update_defaults "$2" "$3"
      shift 2
      ;;
    -d|--debug)
      DEBUG=1
      ;;
    --trace)
      set -x
      ;;
    --*)
      echo >&2 "Invalid flag: $1"
      exit 1
      ;;
  esac
  shift
done

DEBUG="${DEBUG:-}"
# MAIN PROGRAM
# Read all refs from stdin, notify slack for each
while read line; do
  set -- $line
  notify $*
  RET=$?
done

exit $RET
